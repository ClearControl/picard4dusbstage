package pi4dusb.bindings;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Convention.Style;
import org.bridj.ann.Convention;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>PI4DUSBStage</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library(value = "PI4DUSBStage", dependencies = {"PiUsb.dll"}) 
@Runtime(CRuntime.class) 
public class PI4DUSBStageLibrary {
	static {
		BridJ.register();
	}
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_NO_ERROR = (int)0;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_DEVICE_NOT_FOUND = (int)1;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_OBJECT_NOT_FOUND = (int)2;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_CANNOT_CREATE_OBJECT = (int)3;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_INVALID_DEVICE_HANDLE = (int)4;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_READ_TIMEOUT = (int)5;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_READ_THREAD_ABANDONED = (int)6;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_READ_FAILED = (int)7;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_INVALID_PARAMETER = (int)8;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_WRITE_FAILED = (int)9;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_SHUTTER_OPEN = (int)1;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_SHUTTER_CLOSED = (int)0;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_FLIPPER_EXTENDED = (int)1;
	/** <i>native declaration : lib\piccard\PiUsb.h</i> */
	public static final int PI_FLIPPER_RETRACTED = (int)0;
	/**
	 * Shutter Functions<br>
	 * Original signature : <code>void* piConnectShutter(int*, int)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:38</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static Pointer<? > piConnectShutter(Pointer<Integer > ErrorNumber, int SerialNum) {
		return Pointer.pointerToAddress(piConnectShutter(Pointer.getPeer(ErrorNumber), SerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@Ptr 
	protected native static long piConnectShutter(@Ptr long ErrorNumber, int SerialNum);
	/**
	 * Original signature : <code>void piDisconnectShutter(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:39</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static void piDisconnectShutter(Pointer<? > devicePtr) {
		piDisconnectShutter(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static void piDisconnectShutter(@Ptr long devicePtr);
	/**
	 * Original signature : <code>int piSetShutterState(int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:40</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piSetShutterState(int ShutterState, Pointer<? > devicePtr) {
		return piSetShutterState(ShutterState, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piSetShutterState(int ShutterState, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetShutterState(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:41</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetShutterState(Pointer<Integer > CurrentShutterState, Pointer<? > devicePtr) {
		return piGetShutterState(Pointer.getPeer(CurrentShutterState), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetShutterState(@Ptr long CurrentShutterState, @Ptr long devicePtr);
	/**
	 * Flipper Functions<br>
	 * Original signature : <code>void* piConnectFlipper(int*, int)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:44</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static Pointer<? > piConnectFlipper(Pointer<Integer > ErrorNumber, int SerialNum) {
		return Pointer.pointerToAddress(piConnectFlipper(Pointer.getPeer(ErrorNumber), SerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@Ptr 
	protected native static long piConnectFlipper(@Ptr long ErrorNumber, int SerialNum);
	/**
	 * Original signature : <code>void piDisconnectFlipper(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:45</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static void piDisconnectFlipper(Pointer<? > devicePtr) {
		piDisconnectFlipper(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static void piDisconnectFlipper(@Ptr long devicePtr);
	/**
	 * Original signature : <code>int piSetFlipperState(int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:46</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piSetFlipperState(int FlipperStatevoid, Pointer<? > devicePtr) {
		return piSetFlipperState(FlipperStatevoid, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piSetFlipperState(int FlipperStatevoid, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetFlipperState(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:47</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetFlipperState(Pointer<Integer > CurrentFlipperState, Pointer<? > devicePtr) {
		return piGetFlipperState(Pointer.getPeer(CurrentFlipperState), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetFlipperState(@Ptr long CurrentFlipperState, @Ptr long devicePtr);
	/**
	 * USB Motor Functions<br>
	 * Original signature : <code>void* piConnectMotor(int*, int)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:50</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static Pointer<? > piConnectMotor(Pointer<Integer > ErrorNumber, int SerialNum) {
		return Pointer.pointerToAddress(piConnectMotor(Pointer.getPeer(ErrorNumber), SerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@Ptr 
	protected native static long piConnectMotor(@Ptr long ErrorNumber, int SerialNum);
	/**
	 * Original signature : <code>void piDisconnectMotor(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:51</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static void piDisconnectMotor(Pointer<? > devicePtr) {
		piDisconnectMotor(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static void piDisconnectMotor(@Ptr long devicePtr);
	/**
	 * Original signature : <code>int piHomeMotor(int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:52</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piHomeMotor(int Velocity, Pointer<? > devicePtr) {
		return piHomeMotor(Velocity, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piHomeMotor(int Velocity, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piSetMotorVelocity(int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:53</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piSetMotorVelocity(int Velocity, Pointer<? > devicePtr) {
		return piSetMotorVelocity(Velocity, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piSetMotorVelocity(int Velocity, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piHaltMotor(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:54</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piHaltMotor(Pointer<? > devicePtr) {
		return piHaltMotor(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piHaltMotor(@Ptr long devicePtr);
	/**
	 * Original signature : <code>int piRunMotorToPosition(int, int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:55</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piRunMotorToPosition(int Position, int Velocity, Pointer<? > devicePtr) {
		return piRunMotorToPosition(Position, Velocity, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piRunMotorToPosition(int Position, int Velocity, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetMotorHomeStatus(BOOL*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:56</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetMotorHomeStatus(Pointer<Integer > AtHome, Pointer<? > devicePtr) {
		return piGetMotorHomeStatus(Pointer.getPeer(AtHome), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetMotorHomeStatus(@Ptr long AtHome, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetMotorMovingStatus(BOOL*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:57</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetMotorMovingStatus(Pointer<Integer > Moving, Pointer<? > devicePtr) {
		return piGetMotorMovingStatus(Pointer.getPeer(Moving), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetMotorMovingStatus(@Ptr long Moving, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetMotorVelocity(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:58</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetMotorVelocity(Pointer<Integer > ReportedVelocity, Pointer<? > devicePtr) {
		return piGetMotorVelocity(Pointer.getPeer(ReportedVelocity), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetMotorVelocity(@Ptr long ReportedVelocity, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetMotorPosition(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:59</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetMotorPosition(Pointer<Integer > ReportedPosition, Pointer<? > devicePtr) {
		return piGetMotorPosition(Pointer.getPeer(ReportedPosition), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetMotorPosition(@Ptr long ReportedPosition, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetMotorStatus(int*, BOOL*, BOOL*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:60</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetMotorStatus(Pointer<Integer > ReportedPosition, Pointer<Integer > Moving, Pointer<Integer > AtHome, Pointer<? > devicePtr) {
		return piGetMotorStatus(Pointer.getPeer(ReportedPosition), Pointer.getPeer(Moving), Pointer.getPeer(AtHome), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetMotorStatus(@Ptr long ReportedPosition, @Ptr long Moving, @Ptr long AtHome, @Ptr long devicePtr);
	/**
	 * USB Twister Functions<br>
	 * Original signature : <code>void* piConnectTwister(int*, int)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:63</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static Pointer<? > piConnectTwister(Pointer<Integer > ErrorNumber, int SerialNum) {
		return Pointer.pointerToAddress(piConnectTwister(Pointer.getPeer(ErrorNumber), SerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@Ptr 
	protected native static long piConnectTwister(@Ptr long ErrorNumber, int SerialNum);
	/**
	 * Original signature : <code>void piDisconnectTwister(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:64</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static void piDisconnectTwister(Pointer<? > devicePtr) {
		piDisconnectTwister(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static void piDisconnectTwister(@Ptr long devicePtr);
	/**
	 * Original signature : <code>int piSetTwisterPositionZero(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:65</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piSetTwisterPositionZero(Pointer<? > devicePtr) {
		return piSetTwisterPositionZero(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piSetTwisterPositionZero(@Ptr long devicePtr);
	/**
	 * Original signature : <code>int piRunTwisterToPosition(int, int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:66</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piRunTwisterToPosition(int Position, int Velocity, Pointer<? > devicePtr) {
		return piRunTwisterToPosition(Position, Velocity, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piRunTwisterToPosition(int Position, int Velocity, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piRunTwisterContinuous(int, int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:67</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piRunTwisterContinuous(int Direction, int Velocity, Pointer<? > devicePtr) {
		return piRunTwisterContinuous(Direction, Velocity, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piRunTwisterContinuous(int Direction, int Velocity, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piHaltTwister(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:68</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piHaltTwister(Pointer<? > devicePtr) {
		return piHaltTwister(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piHaltTwister(@Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetTwisterMovingStatus(BOOL*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:69</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetTwisterMovingStatus(Pointer<Integer > Moving, Pointer<? > devicePtr) {
		return piGetTwisterMovingStatus(Pointer.getPeer(Moving), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetTwisterMovingStatus(@Ptr long Moving, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetTwisterPosition(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:70</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetTwisterPosition(Pointer<Integer > ReportedPosition, Pointer<? > devicePtr) {
		return piGetTwisterPosition(Pointer.getPeer(ReportedPosition), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetTwisterPosition(@Ptr long ReportedPosition, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetTwisterVelocity(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:71</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetTwisterVelocity(Pointer<Integer > ReportedVelocity, Pointer<? > devicePtr) {
		return piGetTwisterVelocity(Pointer.getPeer(ReportedVelocity), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetTwisterVelocity(@Ptr long ReportedVelocity, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetTwisterStatus(int*, BOOL*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:72</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetTwisterStatus(Pointer<Integer > ReportedPosition, Pointer<Integer > Moving, Pointer<? > devicePtr) {
		return piGetTwisterStatus(Pointer.getPeer(ReportedPosition), Pointer.getPeer(Moving), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetTwisterStatus(@Ptr long ReportedPosition, @Ptr long Moving, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetTwisterSensorPosition(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:73</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetTwisterSensorPosition(Pointer<Integer > SensorPosition, Pointer<? > devicePtr) {
		return piGetTwisterSensorPosition(Pointer.getPeer(SensorPosition), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetTwisterSensorPosition(@Ptr long SensorPosition, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetTwisterStatusEx(int*, int*, BOOL*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:74</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetTwisterStatusEx(Pointer<Integer > ReportedPosition, Pointer<Integer > SensorPosition, Pointer<Integer > Moving, Pointer<? > devicePtr) {
		return piGetTwisterStatusEx(Pointer.getPeer(ReportedPosition), Pointer.getPeer(SensorPosition), Pointer.getPeer(Moving), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetTwisterStatusEx(@Ptr long ReportedPosition, @Ptr long SensorPosition, @Ptr long Moving, @Ptr long devicePtr);
	/**
	 * Filter Wheel Functions<br>
	 * Original signature : <code>void* piConnectFilter(int*, int)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:77</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static Pointer<? > piConnectFilter(Pointer<Integer > ErrorNumber, int SerialNum) {
		return Pointer.pointerToAddress(piConnectFilter(Pointer.getPeer(ErrorNumber), SerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@Ptr 
	protected native static long piConnectFilter(@Ptr long ErrorNumber, int SerialNum);
	/**
	 * Original signature : <code>void piDisconnectFilter(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:78</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static void piDisconnectFilter(Pointer<? > devicePtr) {
		piDisconnectFilter(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static void piDisconnectFilter(@Ptr long devicePtr);
	/**
	 * Original signature : <code>int piSetFilterPosition(int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:79</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piSetFilterPosition(int Position, Pointer<? > devicePtr) {
		return piSetFilterPosition(Position, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piSetFilterPosition(int Position, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetFilterPosition(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:80</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetFilterPosition(Pointer<Integer > ReportedPosition, Pointer<? > devicePtr) {
		return piGetFilterPosition(Pointer.getPeer(ReportedPosition), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetFilterPosition(@Ptr long ReportedPosition, @Ptr long devicePtr);
	/**
	 * Gradient Wheel Functions<br>
	 * Original signature : <code>void* piConnectGWheel(int*, int)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:83</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static Pointer<? > piConnectGWheel(Pointer<Integer > ErrorNumber, int SerialNum) {
		return Pointer.pointerToAddress(piConnectGWheel(Pointer.getPeer(ErrorNumber), SerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@Ptr 
	protected native static long piConnectGWheel(@Ptr long ErrorNumber, int SerialNum);
	/**
	 * Original signature : <code>void piDisconnectGWheel(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:84</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static void piDisconnectGWheel(Pointer<? > devicePtr) {
		piDisconnectGWheel(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static void piDisconnectGWheel(@Ptr long devicePtr);
	/**
	 * Original signature : <code>int piSetGWheelPosition(int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:85</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piSetGWheelPosition(int Position, Pointer<? > devicePtr) {
		return piSetGWheelPosition(Position, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piSetGWheelPosition(int Position, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetGWheelPosition(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:86</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetGWheelPosition(Pointer<Integer > ReportedPosition, Pointer<? > devicePtr) {
		return piGetGWheelPosition(Pointer.getPeer(ReportedPosition), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetGWheelPosition(@Ptr long ReportedPosition, @Ptr long devicePtr);
	/**
	 * Relay Functions<br>
	 * Original signature : <code>void* piConnectRelay(int*, int)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:89</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static Pointer<? > piConnectRelay(Pointer<Integer > ErrorNumber, int SerialNum) {
		return Pointer.pointerToAddress(piConnectRelay(Pointer.getPeer(ErrorNumber), SerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@Ptr 
	protected native static long piConnectRelay(@Ptr long ErrorNumber, int SerialNum);
	/**
	 * Original signature : <code>void piDisconnectRelay(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:90</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static void piDisconnectRelay(Pointer<? > devicePtr) {
		piDisconnectRelay(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static void piDisconnectRelay(@Ptr long devicePtr);
	/**
	 * Bit 0 = relay 1, Bit 1 = relay 2...etc.<br>
	 * Original signature : <code>int piSetRelayStates(int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:91</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piSetRelayStates(int RelayStates, Pointer<? > devicePtr) {
		return piSetRelayStates(RelayStates, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piSetRelayStates(int RelayStates, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetRelayStates(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:92</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetRelayStates(Pointer<Integer > ReportedStates, Pointer<? > devicePtr) {
		return piGetRelayStates(Pointer.getPeer(ReportedStates), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetRelayStates(@Ptr long ReportedStates, @Ptr long devicePtr);
	/**
	 * Laser Functions<br>
	 * Original signature : <code>void* piConnectLaser(int*, int)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:95</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static Pointer<? > piConnectLaser(Pointer<Integer > ErrorNumber, int SerialNum) {
		return Pointer.pointerToAddress(piConnectLaser(Pointer.getPeer(ErrorNumber), SerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@Ptr 
	protected native static long piConnectLaser(@Ptr long ErrorNumber, int SerialNum);
	/**
	 * Original signature : <code>void piDisconnectLaser(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:96</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static void piDisconnectLaser(Pointer<? > devicePtr) {
		piDisconnectLaser(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static void piDisconnectLaser(@Ptr long devicePtr);
	/**
	 * Bit 3 controls laser<br>
	 * Original signature : <code>int piSetLaserStates(int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:97</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piSetLaserStates(int LaserStates, Pointer<? > devicePtr) {
		return piSetLaserStates(LaserStates, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piSetLaserStates(int LaserStates, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetLaserStates(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:98</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetLaserStates(Pointer<Integer > ReportedStates, Pointer<? > devicePtr) {
		return piGetLaserStates(Pointer.getPeer(ReportedStates), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetLaserStates(@Ptr long ReportedStates, @Ptr long devicePtr);
	/**
	 * Rotator Functions<br>
	 * Original signature : <code>void* piConnectRotator(int*, int)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:101</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static Pointer<? > piConnectRotator(Pointer<Integer > ErrorNumber, int SerialNum) {
		return Pointer.pointerToAddress(piConnectRotator(Pointer.getPeer(ErrorNumber), SerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@Ptr 
	protected native static long piConnectRotator(@Ptr long ErrorNumber, int SerialNum);
	/**
	 * Original signature : <code>void piDisconnectRotator(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:102</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static void piDisconnectRotator(Pointer<? > devicePtr) {
		piDisconnectRotator(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static void piDisconnectRotator(@Ptr long devicePtr);
	/**
	 * Original signature : <code>int piSetRotatorPosition(int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:103</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piSetRotatorPosition(int Position, Pointer<? > devicePtr) {
		return piSetRotatorPosition(Position, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piSetRotatorPosition(int Position, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetRotatorPosition(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:104</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetRotatorPosition(Pointer<Integer > ReportedPosition, Pointer<? > devicePtr) {
		return piGetRotatorPosition(Pointer.getPeer(ReportedPosition), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetRotatorPosition(@Ptr long ReportedPosition, @Ptr long devicePtr);
	/**
	 * Valve Functions<br>
	 * Original signature : <code>void* piConnectValve(int*, int)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:107</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static Pointer<? > piConnectValve(Pointer<Integer > ErrorNumber, int SerialNum) {
		return Pointer.pointerToAddress(piConnectValve(Pointer.getPeer(ErrorNumber), SerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@Ptr 
	protected native static long piConnectValve(@Ptr long ErrorNumber, int SerialNum);
	/**
	 * Original signature : <code>void piDisconnectValve(void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:108</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static void piDisconnectValve(Pointer<? > devicePtr) {
		piDisconnectValve(Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static void piDisconnectValve(@Ptr long devicePtr);
	/**
	 * Bit 0 = valve 1, Bit 1 = valve 2<br>
	 * Original signature : <code>int piSetValveStates(int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:109</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piSetValveStates(int ValveStates, Pointer<? > devicePtr) {
		return piSetValveStates(ValveStates, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piSetValveStates(int ValveStates, @Ptr long devicePtr);
	/**
	 * Original signature : <code>int piGetValveStates(int*, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:110</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetValveStates(Pointer<Integer > ReportedStates, Pointer<? > devicePtr) {
		return piGetValveStates(Pointer.getPeer(ReportedStates), Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetValveStates(@Ptr long ReportedStates, @Ptr long devicePtr);
	/**
	 * Sensor number = 0 or 1<br>
	 * Original signature : <code>int piGetValveSensor(int*, int, void*)</code><br>
	 * <i>native declaration : lib\piccard\PiUsb.h:111</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int piGetValveSensor(Pointer<Integer > SensorValue, int SensorNumber, Pointer<? > devicePtr) {
		return piGetValveSensor(Pointer.getPeer(SensorValue), SensorNumber, Pointer.getPeer(devicePtr));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int piGetValveSensor(@Ptr long SensorValue, int SensorNumber, @Ptr long devicePtr);
}
